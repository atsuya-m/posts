<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on </title>
    <link>//localhost:1313/tags/aws/</link>
    <description>Recent content in Aws on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 26 Jan 2025 15:04:40 +0900</lastBuildDate><atom:link href="//localhost:1313/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workload Identity 連携</title>
      <link>//localhost:1313/posts/workload-identity/</link>
      <pubDate>Sun, 26 Jan 2025 15:04:40 +0900</pubDate>
      
      <guid>//localhost:1313/posts/workload-identity/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;AWS 上のアプリケーションから Google API を呼び出す必要があり、
その認証・認可の手法として Workload Identity 連携を設定したので備忘録です。&lt;/p&gt;
&lt;h1 id=&#34;workload-identity-連携について&#34;&gt;Workload Identity 連携について&lt;/h1&gt;
&lt;p&gt;Workload Identity 連携の特徴はざっと以下のような感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他のクラウドサービス上で動くアプリケーションから Google サービスアカウントの権限を借用することができる&lt;/li&gt;
&lt;li&gt;アプリケーション側に設定する credential 情報にシークレット情報は含まれないので、安全に取り回すことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者自体は他の方法でも達成することができますが、
シークレット情報を含むためセキュリティ観点から取扱いが難しいです。&lt;/p&gt;
&lt;p&gt;では、 Workload Identity 連携でどうやって後者を実現しているかというと、
サービスアカウントを所有している Google Cloud 側とアプリケーション側にそれぞれ受入れ設定とリクエスト設定を入れるからです。&lt;/p&gt;
&lt;p&gt;イメージとしては、インターホンが鳴った時に声と顔を見て相手が誰かを識別して対応を変える感じですかね。&lt;/p&gt;
&lt;h1 id=&#34;google-cloud-側の設定&#34;&gt;Google Cloud 側の設定&lt;/h1&gt;
&lt;p&gt;Google Cloud 側にはワークロードの受入れ設定をしていきます。
が、その前に Workload Identity 連携で使われる重要な二つの概念を紹介しておきます。
把握しておくと読み進めやすいです。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;用語&lt;/th&gt;
          &lt;th&gt;説明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Pool&lt;/td&gt;
          &lt;td&gt;複数のプロバイダをグループ化し、Google Cloud の IAM との橋渡しをする&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Provider&lt;/td&gt;
          &lt;td&gt;実際に認証を行う外部 ID ソース（OIDC/SAML）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-google-サービスアカウントの作成&#34;&gt;1. Google サービスアカウントの作成&lt;/h2&gt;
&lt;p&gt;いつも通り Google サービスアカウントを作成しましょう。そしていつも通り自分の欲しい権限を付与しておきます。&lt;/p&gt;
&lt;p&gt;そして Workload Identity 連携経由でサービスアカウントの認証が取れるように&lt;strong&gt;ロールに「Workload Identity ユーザー」を付与しておきます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-workload-identity-プールの作成&#34;&gt;2. Workload Identity プールの作成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/iam-admin/workload-identity-pools&#34;&gt;コンソール&lt;/a&gt;からプールを作成します。
最初からプロバイダ設定も行う必要があるみたいですが、この時点では難しいのでプール名以外は適当に入力してとりあえずプールを作成します。&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;AWS 上のアプリケーションから Google API を呼び出す必要があり、
その認証・認可の手法として Workload Identity 連携を設定したので備忘録です。&lt;/p&gt;
&lt;h1 id=&#34;workload-identity-連携について&#34;&gt;Workload Identity 連携について&lt;/h1&gt;
&lt;p&gt;Workload Identity 連携の特徴はざっと以下のような感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他のクラウドサービス上で動くアプリケーションから Google サービスアカウントの権限を借用することができる&lt;/li&gt;
&lt;li&gt;アプリケーション側に設定する credential 情報にシークレット情報は含まれないので、安全に取り回すことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者自体は他の方法でも達成することができますが、
シークレット情報を含むためセキュリティ観点から取扱いが難しいです。&lt;/p&gt;
&lt;p&gt;では、 Workload Identity 連携でどうやって後者を実現しているかというと、
サービスアカウントを所有している Google Cloud 側とアプリケーション側にそれぞれ受入れ設定とリクエスト設定を入れるからです。&lt;/p&gt;
&lt;p&gt;イメージとしては、インターホンが鳴った時に声と顔を見て相手が誰かを識別して対応を変える感じですかね。&lt;/p&gt;
&lt;h1 id=&#34;google-cloud-側の設定&#34;&gt;Google Cloud 側の設定&lt;/h1&gt;
&lt;p&gt;Google Cloud 側にはワークロードの受入れ設定をしていきます。
が、その前に Workload Identity 連携で使われる重要な二つの概念を紹介しておきます。
把握しておくと読み進めやすいです。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;用語&lt;/th&gt;
          &lt;th&gt;説明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Pool&lt;/td&gt;
          &lt;td&gt;複数のプロバイダをグループ化し、Google Cloud の IAM との橋渡しをする&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Provider&lt;/td&gt;
          &lt;td&gt;実際に認証を行う外部 ID ソース（OIDC/SAML）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-google-サービスアカウントの作成&#34;&gt;1. Google サービスアカウントの作成&lt;/h2&gt;
&lt;p&gt;いつも通り Google サービスアカウントを作成しましょう。そしていつも通り自分の欲しい権限を付与しておきます。&lt;/p&gt;
&lt;p&gt;そして Workload Identity 連携経由でサービスアカウントの認証が取れるように&lt;strong&gt;ロールに「Workload Identity ユーザー」を付与しておきます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-workload-identity-プールの作成&#34;&gt;2. Workload Identity プールの作成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/iam-admin/workload-identity-pools&#34;&gt;コンソール&lt;/a&gt;からプールを作成します。
最初からプロバイダ設定も行う必要があるみたいですが、この時点では難しいのでプール名以外は適当に入力してとりあえずプールを作成します。&lt;/p&gt;
&lt;h2 id=&#34;3-プロバイダの設定を追加する&#34;&gt;3. プロバイダの設定を追加する&lt;/h2&gt;
&lt;p&gt;コンソールから先ほど作成したプールのページを開くと「プロバイダを追加」ボタンがあります。&lt;/p&gt;
&lt;h3 id=&#34;プロバイダの種類&#34;&gt;プロバイダの種類&lt;/h3&gt;
&lt;p&gt;最初にプロバイダの種類を選択することになるのですが、自分の場合は EKS on Fargate (AWS) でアプリケーションを動かしているのでここでは OIDC を選択します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS じゃなくて OIDC なの？&lt;/p&gt;
&lt;p&gt;逆に AWS という選択肢は ECS 専用だと思って良いと思います。
EKS の場合は、ポッド起動時にポッドに設定してある Kubernetes Service Account の認証情報を
&lt;code&gt;/var/run/secrets/eks.amazonaws.com/serviceaccount/token&lt;/code&gt; にマウントします。
この認証情報の発行者は EKS クラスタ上にある OIDC プロバイダなので、まさに OIDC を選択できます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;発行元オーディエンス&#34;&gt;発行元・オーディエンス&lt;/h3&gt;
&lt;p&gt;次に発行元とオーディエンスを設定していくのですが、
OIDC プロバイダの場合は発行されている jwt トークンをベースに設定項目を埋めていきます。&lt;/p&gt;
&lt;p&gt;サンプルとして以下に EKS 上の OIDC プロバイダが発行した jwt トークンを記載します。
（なお、一部はセキュリティ観点からダミーの情報に書き換えています）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;aud&amp;#34;: [
    &amp;#34;sts.amazonaws.com&amp;#34;
  ],
  &amp;#34;exp&amp;#34;: 1111111111,
  &amp;#34;iat&amp;#34;: 1111111111,
  &amp;#34;iss&amp;#34;: &amp;#34;https://oidc.eks.ap-northeast-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;#34;,
  &amp;#34;jti&amp;#34;: &amp;#34;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&amp;#34;,
  &amp;#34;kubernetes.io&amp;#34;: {
    &amp;#34;namespace&amp;#34;: &amp;#34;namespace-hoge&amp;#34;,
    &amp;#34;node&amp;#34;: {
      &amp;#34;name&amp;#34;: &amp;#34;fargate-ip-172-21-157-189.ap-northeast-1.compute.internal&amp;#34;,
      &amp;#34;uid&amp;#34;: &amp;#34;ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj&amp;#34;
    },
    &amp;#34;pod&amp;#34;: {
      &amp;#34;name&amp;#34;: &amp;#34;atsuya-8b657f89d-wjzfc&amp;#34;,
      &amp;#34;uid&amp;#34;: &amp;#34;kkkkkkkk-llll-mmmm-nnnn-oooooooooooo&amp;#34;
    },
    &amp;#34;serviceaccount&amp;#34;: {
      &amp;#34;name&amp;#34;: &amp;#34;atsuya-service-account&amp;#34;,
      &amp;#34;uid&amp;#34;: &amp;#34;pppppppp-qqqq-rrrr-ssss-tttttttttttt&amp;#34;
    }
  },
  &amp;#34;nbf&amp;#34;: 1111111111,
  &amp;#34;sub&amp;#34;: &amp;#34;system:serviceaccount:namespace-hoge:atsuya-service-account&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のような jwt トークンの場合は以下のように設定します。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;設定&lt;/th&gt;
          &lt;th&gt;値&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;発行元(URL)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;https://oidc.eks.ap-northeast-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;オーディエンス&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;sts.amazonaws.com&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;属性&#34;&gt;属性&lt;/h3&gt;
&lt;p&gt;ここまでで、一応は発行元を設定したので同じ発行元であればOKというぐらいには緩い設定が完了しています。
とはいえそれだけだとセキュリティ敵に厳しいということがあるのでさらにこの jwt トークンから必要な値を属性として設定していきます。&lt;/p&gt;
&lt;p&gt;この時、 jwt トークンの構文解析のために &lt;a href=&#34;https://github.com/google/cel-spec/blob/master/doc/intro.md#introduction&#34;&gt;CEL式&lt;/a&gt;を使用します。&lt;/p&gt;
&lt;p&gt;基本的には &lt;code&gt;google.subject = assertion.sub&lt;/code&gt; と入力しておけばOKですが、
自分の場合は「EKS上の Namespace は任意の値であってほしい」という需要があったので、マッピングを追加して
&lt;code&gt;attribute.ksa_name = assertion.sub.split(&amp;quot;:&amp;quot;)[3]&lt;/code&gt; という属性を追加しました。&lt;/p&gt;
&lt;h2 id=&#34;4-サービスアカウントとプールを紐付ける&#34;&gt;4. サービスアカウントとプールを紐付ける&lt;/h2&gt;
&lt;p&gt;ここまで設定が完了したら後は「どのサービスアカウント」の権限を借用するかを設定します。&lt;/p&gt;
&lt;p&gt;コンソールの「アクセスを許可」から 1. で作成したサービスアカウントを選択し、 3. で設定した属性とその属性がどういう値の場合かを入力します。&lt;/p&gt;
&lt;p&gt;例えば自分の場合は、&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;属性名&lt;/th&gt;
          &lt;th&gt;属性値&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;ksa_name&lt;/td&gt;
          &lt;td&gt;atusya-service-account&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;です。
以上で Google Cloud 側の設定は完了です。&lt;/p&gt;
&lt;h1 id=&#34;アプリケーション側の設定&#34;&gt;アプリケーション側の設定&lt;/h1&gt;
&lt;p&gt;Google Cloud 側の設定が完了すると Workload Identity 用の credentials.json をダウンロードできます。
ダウンロードした json をアプリケーション側の任意のディレクトリに配置し、環境変数&lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;でそのファイルパスを指定します。&lt;/p&gt;
&lt;p&gt;後はアプリケーション側の Google API Client Library がよしなに Workload Identity 連携フローに沿って Google サービスアカウントの認証を得てくれます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;クライアントライブラリの具体的な処理順は Go クライアントの実装が一番分かり易かったです。
もし、クライアントライブラリを使用せずに Workload Identity 連携をしたい場合は、そちらを参照ください。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
  </channel>
</rss>
